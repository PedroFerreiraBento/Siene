"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var formal_1 = __importDefault(require("@kevinwolf/formal"));
function useFormalNative(initialValues, config) {
    var formal = formal_1.default(initialValues, config);
    var getFormProps = react_1.useCallback(function () {
        throw new Error('formal.getFormProps() is not supported on React Native');
    }, []);
    var getFieldProps = react_1.useCallback(function (field) { return (__assign({}, formal.getFieldProps(field), { onChangeText: function (text) {
            formal.change(field, text);
        } })); }, [formal]);
    var getResetButtonProps = react_1.useCallback(function () { return (__assign({}, formal.getResetButtonProps(), { onPress: function () {
            formal.reset();
        } })); }, [formal]);
    var getSubmitButtonProps = react_1.useCallback(function () { return (__assign({}, formal.getSubmitButtonProps(), { onPress: function () {
            formal.submit();
        } })); }, [formal]);
    return __assign({}, formal, { getFormProps: getFormProps,
        getFieldProps: getFieldProps,
        getResetButtonProps: getResetButtonProps,
        getSubmitButtonProps: getSubmitButtonProps });
}
exports.default = useFormalNative;
